
1.ContainsDuplicate 
In Java 
class Solution {
    public boolean containsDuplicate(int[] nums) {

        Set<Integer> set = new HashSet<>();
        for(int num : nums) {
            if(set.contains(num)){
                return true;
            }
            set.add(num);
        }
        return false;
    } 
}

In C#
public class Solution {
    public bool ContainsDuplicate(int[] nums) {
        HashSet<int> set = new HashSet<int>();
        foreach(int num in nums){
            if(set.Contains(num)){
                return true;
            }
            set.Add(num);
        }
        return false;
    }
}


2. Valid Anagram
In Java

class Solution {
    public boolean isAnagram(String s, String t) {
       if(s.length() != t.length()) return false;
        int[] counts = new int[26];

        for(int i = 0; i < s.length(); i++){
        counts[s.charAt(i) -'a']++;
        counts[t.charAt() - 'a']--;  
    }

    for(int count : counts){
        if(count != 0) 
        return false;
    }

    return true;
    } 

}

In C#
public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length != t.Length) return false;
        int[] counts = new int[26];

        for(int i = 0; i < s.Length; i++){
        counts[s[i] -'a']++;
        counts[t[i]-'a']--;  
    }

    foreach (int count in counts){
        if(count != 0) 
        return false;
    }

    return true;
    }
}


In Java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map = new HashMap<>();

        for(int i = 0; i < nums.length; i++){
            int diff = target - nums[i];
        

        if(map.containsKey(diff)){
        return new int[] {map.get(diff), i};
        }
    
        map.put(nums[i], i);
        }
            throw new IllegalArgumentException("No two sum solution");
             
    }
}

In C#
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
          Dictionary<int,int> map = new Dictionary<int, int>();

        for(int i = 0; i < nums.Length; i++){
            int diff = target - nums[i];
        

        if(map.ContainsKey(diff)){
        return new int[] {map[diff], i};
        }
    
        map[nums[i]] = i;
        }
            throw new ArgumentException("No two sum solution");
             
    }
    }